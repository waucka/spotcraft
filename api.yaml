---
swagger: "2.0"
schemes:
- https
info:
  description: API for managing Minecraft servers running on spot instances
  title: SpotCraft
  version: "1"

definitions:
  Empty:
    type: object
  Instance:
    type: object
    properties:
      instance_id:
        type: string
      server_name:
        type: string
      ip:
        type: string
  InstanceList:
    type: array
    items:
      $ref: '#/definitions/Instance'
  NewInstance:
    type: object
    properties:
      server_name:
        type: string
      duration:
        type: integer
      key_name:
        type: string
  GeneralResponse:
    type: object
    properties:
      message:
        type: string
  MinecraftUser:
    type: object
    properties:
      uuid:
        type: string
      username:
        type: string
  Server:
    type: object
    properties:
      minecraft_type:
        type: string
      ec2_type:
        type: string
      ami_id:
        type: string
      world_volume_id:
        type: string
      eip_id:
        type: string
      initial_op:
        $ref: '#/definitions/MinecraftUser'
  ModifyServer:
    type: object
    additionalProperties:
        type: string
  ServerList:
    type: object
    additionalProperties:
      $ref: '#/definitions/Server'

paths:
  /instances:
    get:
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/InstanceList'
      summary: List all Minecraft server instances
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.ListInstances}}'
    options:
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Headers:
              description: Used in response to a preflight request to indicate which
                HTTP headers can be used when making the request.
              type: string
            Access-Control-Allow-Methods:
              description: Method or methods allowed when accessing the resource
              type: string
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
      summary: CORS support
      x-amazon-apigateway-integration:
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: mock
    post:
      consumes:
      - application/json
      operationId: CreateInstance
      parameters:
      - in: body
        name: NewInstance
        required: true
        schema:
          $ref: '#/definitions/NewInstance'
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '500':
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
      summary: Create a Minecraft server instance
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.CreateInstance}}'
  /instances/{instanceId}:
    delete:
      operationId: StopInstance
      parameters:
      - description: The id of the instance to stop
        in: path
        name: instanceId
        required: true
        type: string
      - description: Terminate the instance instead of stopping it
        in: header
        name: Terminate
        required: false
        type: boolean
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '404':
          description: No such instance
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '500':
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
      summary: Shut down an instance cleanly
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: NEVER
        requestParameters:
          integration.request.path.petId: method.request.path.petId
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.ShutdownInstance}}'
    options:
      consumes:
      - application/json
      parameters:
      - description: The id of the instance to stop
        in: path
        name: instanceId
        required: true
        type: string
      - description: Terminate the instance instead of stopping it
        in: header
        name: Terminate-Instance
        required: false
        type: boolean
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Headers:
              description: Used in response to a preflight request to indicate which
                HTTP headers can be used when making the request.
              type: string
            Access-Control-Allow-Methods:
              description: Method or methods allowed when accessing the resource
              type: string
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
      summary: CORS support
      x-amazon-apigateway-integration:
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: mock
  /servers:
    get:
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/ServerList'
      summary: List all Minecraft server servers
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.ListServers}}'
    options:
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Headers:
              description: Used in response to a preflight request to indicate which
                HTTP headers can be used when making the request.
              type: string
            Access-Control-Allow-Methods:
              description: Method or methods allowed when accessing the resource
              type: string
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
      summary: CORS support
      x-amazon-apigateway-integration:
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: mock
  /servers/{serverName}:
    put:
      consumes:
      - application/json
      operationId: CreateServer
      parameters:
      - in: body
        name: NewServer
        required: true
        schema:
          $ref: '#/definitions/Server'
      - description: The name of the server to create
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '500':
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
      summary: Create a Minecraft server
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.CreateServer}}'
    patch:
      consumes:
      - application/json
      operationId: ModifyServer
      parameters:
      - in: body
        name: ModifyServer
        required: true
        schema:
          $ref: '#/definitions/ModifyServer'
      - description: The name of the server to modify
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '500':
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
      summary: Modify an existing Minecraft server
      x-amazon-apigateway-integration:
        httpMethod: POST
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.ModifyServer}}'
    delete:
      operationId: DeleteServer
      parameters:
      - description: The name of the server to delete
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
        '400':
          description: Bad request
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
        '500':
          description: Internal error
          headers:
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/GeneralResponse'
      summary: Delete a server
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: NEVER
        requestParameters:
          integration.request.path.petId: method.request.path.petId
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: AWS_PROXY
        uri: 'arn:aws:apigateway:{{.Region}}:lambda:path/{{.Paths.DeleteServer}}'
    options:
      consumes:
      - application/json
      parameters:
      - description: The name of the server to manipulate
        in: path
        name: serverName
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Headers:
              description: Used in response to a preflight request to indicate which
                HTTP headers can be used when making the request.
              type: string
            Access-Control-Allow-Methods:
              description: Method or methods allowed when accessing the resource
              type: string
            Access-Control-Allow-Origin:
              description: URI that may access the resource
              type: string
          schema:
            $ref: '#/definitions/Empty'
      summary: CORS support
      x-amazon-apigateway-integration:
        passthroughBehavior: NEVER
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            statusCode: '200'
        type: mock
